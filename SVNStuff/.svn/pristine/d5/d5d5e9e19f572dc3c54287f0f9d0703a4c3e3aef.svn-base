/*
 * University of California, Berkeley
 * Pioneers in Engineering, Robotics Organizer.
 * PiER Framework v0.2b - 04/14/11
 * 
 * Changelog:
 * v0.2b
 *  - Uncommented motor controller constructors
 *  - Moved teleoperated/autonomous checking to Robot.cs threads
*/

using System;
using System.Threading;
using Microsoft.SPOT;
using Microsoft.SPOT.Hardware;

/*public A6281.Single shiftBrite;
private long shiftBriteTimer;
private static long shiftBritePeriod = 5000000;*/

namespace PiEAPI
{
    public class StudentCode
    {
        // Variables

        /// <summary>
        /// robot should be used to access *only* the properties fieldTime, canMove, isAutonomous, and isBlue
        /// </summary>
        private Robot robot;

        /// <summary>
        /// These variables are examples of the use of ActuatorController variables
        /// </summary>
        //private SimpleMotorController smcR;
        //private SimpleMotorController smcL;
        private I2CMotorController i2c;
        //private   DigitalSwitch switchR;
        //private DigitalSwitch switchL;
        //private SharpDistanceTracker rfL;
        //private SharpDistanceTracker rfR;
        private int rfR1;
        private int rfR2;
        private int rfL1;
        private int rfL2;
        //private MicroMaestro mm;
        private int timer;

        // Constructor
        public StudentCode(Robot robot)
        {
            this.robot = robot;
            //smcR = new SimpleMotorController(robot, 13); //let's say 13 is right motor on drivetrain
            //smcL = new SimpleMotorController(robot, 14); //let's say 14 is left motor on drivetrain
            //mm = new MicroMaestro(robot, 12);
            i2c = new I2CMotorController(robot, 0x0A);
           /* switchL = new DigitalSwitch(1);
            switchR = new DigitalSwitch(2);
            rfL = new SharpDistanceTracker(0);
            rfR = new SharpDistanceTracker(1);*/
            rfR1 = 0;
            rfR2 = 0;
            rfL1 = 0;
            rfL2 = 0;
            timer = 0;/**/
        }

        /// <summary>
        /// The robot will call this method every time it needs to run the user-controlled student code
        /// The StudentCode should basically treat this as a chance to read all the new PiEMOS analog/digital values
        /// and then use them to update the actuator states
        /// </summary>
        public void UserControlledCode()
        {
           // Debug.Print("User Controlled");
            // always first set brake to 0 to move the motors
            //smcL.motorBrake = 0;
            //smcR.motorBrake = 0;

            // Observe two values from the PiEMOS interface (like left and right joysticks) and map them directly to the speeds of the motors
            // PiEMOS interface values will be between 0 and 255, but I'm centering motor speed = 0 at 128 (halfway between 0 and 255), so that I
            // can get negative and positive speeds.
            // Because SimpleMotorController's motorSpeed only accepts between -100 and 100, I have to map the values to that range.
            // Ex. PiEMOS Interface value of 255 --> (255 - 128) * 100 / 128 = 99.23 (basically 100, the highest forward motor speed)
            // EX. PiEMOS Interface value of 0 --> (0 - 128) * 100 / 128 = -100 (the highest backward motor speed)
            // The nice thing is that this will automatically change the motor speed to things like joystick values when the joysticks are moved
            int coeffR = 1;
            int coeffL = 1;/**/
            //int tempR = rfR.ReadSensor();
            //int tempL = rfL.ReadSensor();
            //if (switchR.Read() /*|| tempR + rfR1 + rfR2 > 150*/)
                coeffR = -1;
            //if (switchL.Read() /*|| tempL + rfL1 + rfL2 > 150*/)
                coeffL = -1;/**/
            //smcL.motorSpeed = (float)0.85 * coeffL * ((float)(robot.UIAnalogVals[1] - 128) * 100 / (float)128);
            //smcR.motorSpeed =coeffR*((float)(robot.UIAnalogVals[3] - 128) * 100 / (float)128);
                i2c.motorSpeed = ((float)(robot.UIAnalogVals[3] - 128) * 100 / (float)128);
           /**///rfR1 = rfR2;
            //rfR2 = tempR;
            //rfL1 = rfL2;
            //rfL2 = tempL;/**/

            // Observe a certain button being pressed on PiEMOS interface, if true (meaning "if pressed"), then brake
            if (robot.UIDigitalVals[0])
            {
                // treat this as a gradual brake. every time this method is called (very often!), it will slowly add more braking
                // until it reaches the max braking of 10, at which it remains at 10.
                if (i2c.motorBrake < 10)
                {
                    //smcR.motorBrake <10
                    i2c.motorBrake = i2c.motorBrake + (float).1; //let's represent fractions with floats. always cast decimals to float
                    //smcR.motorBrake = smcR.motorBrake + (float).1;
                    //smcL.motorBrake = smcL.motorBrake + (float).1;
                }
                else
                {
                    i2c.motorBrake = 10;
                    //smcL.motorBrake = 10;
                    //smcR.motorBrake = 10;
                }
            }
            // at any point, if the button is released, turn braking off
            else
            {
                i2c.motorBrake = 0;
                //smcL.motorBrake = 0;
                //smcR.motorBrake = 0;
            }
            /*string vals = "";
            Debug.Print("switchL: " + switchL.Read() + " switchR: " + switchR.Read() + " rfL: " + rfL.ReadSensor() + " rfR: " + rfR.ReadSensor());
            for (int i = 0; i < robot.UIAnalogVals.Length; i++)
              {
                vals += " " + robot.UIAnalogVals[i];
            }*/
            //Debug.Print("UI: " + vals);
            /*Debug.Print("UI: " + robot.UIAnalogVals[0] + " " + robot.UIAnalogVals[1] + " " + robot.UIAnalogVals[2] + " " + robot.UIAnalogVals[3]);
            Debug.Print("canMove: " + robot.canMove);
            Debug.Print("smcL:" + smcL.motorSpeed);
            Debug.Print("smcR:" + smcR.motorSpeed);*/
            
            /*if (mm.speeds[0] == 20)
            {
                if (timer != 60)
                {
                    mm.speeds[0] = 0;
                }
            }
            if(timer == 60)
            {
                if (mm.speeds[0] == 100)
                {
                    mm.speeds[0] = 0;
                    timer = 0;
                }
                else
                {
                    mm.speeds[0] = mm.speeds[0] + 1;
                    timer = 0;
                }
            }
            timer++;
            if (timer % 10 == 0)
            {
                Random rand = new Random();
                mm.speeds[0] = rand.Next(100);
                mm.targets[0] = rand.Next(180);
                mm.speeds[1] = rand.Next(100);
                mm.targets[1] = rand.Next(180);
            }*/
            /*
            string s = "";
            foreach(int i in robot.UIAnalogVals)
            {
                s += i + " ";
            }
            Debug.Print(s);
            if (robot.UIAnalogVals[5] < 100)
            {
                mm.speeds[0] = 20;
                Debug.Print("0");
                mm.targets[0] = 0;
            }
            else
            {
                mm.speeds[0] = 50;
                Debug.Print("180");
                mm.targets[0] = 180;
            }*/
        }

        /// <summary>
        /// The robot will call this method every time it needs to run the autonomous student code
        /// The StudentCode should basically treat this as a chance to change motors and servos based on
        /// non user-controlled input like sensors. But you don't need sensors, as this example demonstrates.
        /// </summary>
        public void AutonomousCode()
        {
            //Debug.Print("Auton");
            
            //always set motorBrake to 0 to move motors.
            /*smcL.motorBrake = 0;
            smcR.motorBrake = 0;

            //move one wheel full forward and one wheel full backward. Circling like a crazy person is fun.
            smcL.motorSpeed = 100;
            smcR.motorSpeed = -100;

            // But wait... there's more!
            // This will wait for 1000 milliseconds (1 second) and then reverse the direction of turning.
            // Generally *avoid* sleeping because it will add up fast and dramatically reduce responsiveness!

            Thread.Sleep(1000);
            smcL.motorSpeed = -100;
            smcR.motorSpeed = 100;
            */
        }
    }
}
